---
import path from "node:path";
interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
}
import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";

const { id, src, alt, position = "center", basePath = "/" } = Astro.props;
const className = Astro.props.class;

const isLocal = !(
	src.startsWith("/") ||
	src.startsWith("http") ||
	src.startsWith("https") ||
	src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
// biome-ignore lint/suspicious/noImplicitAnyLet: <explanation>
let img;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>("../../**", {
		import: "default",
	});
	let normalizedPath = path
		.normalize(path.join("../../", basePath, src))
		.replace(/\\/g, "/");
	const file = files[normalizedPath];
	if (!file) {
		console.error(
			`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`,
		);
	}
	img = await file();
}

const imageClass = "w-full h-full object-cover";
// const imageStyle = `
// @media (min-width: 768px) {
// 	object-position: bottom;
// }
// @media (min-width: 1024px) {
// 	object-position: cover;
// }
// `;
---
<style>
	#banner-local {
		object-position: 0 -10vh;
	}
	@media (max-width: 1400px) {
		#banner-local {
			object-position: top;
		}
	}
	@media (max-width: 1170px) {
		#banner-local {
			object-position: top;
		}
	}
	@media (max-width: 500px) {
		#banner-local {
			object-position: -30vh 0;
		}
	}
</style>
<div id={id} class:list={[className, 'overflow-hidden relative']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-non"></div>
    {isLocal && img && <Image src={img} alt={alt || ""} class={imageClass} id="banner-local"/>}
    {!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class={imageClass} id="banner-local"/>}
</div>

